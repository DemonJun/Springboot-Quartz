spring:
  application:
    name: goods
  ########## datasource config ====================
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://123.56.6.129:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 180236
    driver-class-name: com.mysql.jdbc.Driver
    druid:
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 5
      # 最大连接池数量
      max-active: 30
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
      # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 10000
      # 是否缓存preparedStatement，也就是PSCache。
      # PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 20
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validationQuery: select 'x'
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validationQueryTimeout: 10
      # 申请连接时执行validationQuery检测连接是否有效，这个配置true会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，这个配置true会降低性能。
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: false
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 30000
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat
      # 日志用的filter:log4j
      # 防御sql注入的filter:wall
      #      filters:
      # 物理连接初始化的时候执行的sql
      #      connectionInitSqls:
  ########## redis config ====================
  redis:
    # redis访问地址
    host: 123.56.6.129
    # redis访问端口
    port: 6379
    # redis访问密码
    password: 180236
    # redis使用数据库（0-15）
    database: 0
  ########## quartz config ====================
  quartz:
    datasource:
      url: jdbc:mysql://123.56.6.129:3306/quartz?useUnicode=true&characterEncoding=utf8&useSSL=false
      username: root
      password: 180236
    #    job-store-type: jdbc
    #    jdbc:
    #      schema: classpath:quartz/schema/tables_mysql_innodb.sql
    #      initialize-schema: always
    properties:
      # 调度器实例名称
      org.quartz.scheduler.instanceName: MyClusteredScheduler
      # 调度器实例编号自动生成
      org.quartz.scheduler.instanceId: AUTO
      # 数据源
      org.quartz.jobStore.dataSource: mysql
      # 持久化方式配置
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      # 持久化方式配置数据驱动，MySQL数据库
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      # 开启分布式部署
      org.quartz.jobStore.isClustered: true
      # 分布式节点有效性检查时间间隔，单位：毫秒
      org.quartz.jobStore.clusterCheckinInterval: 5000
      # 线程池实现类
      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
      # 执行最大并发线程数量
      org.quartz.threadPool.threadCount: 5
      # 线程优先级
      org.quartz.threadPool.threadPriority: 5

########## mybatis-plus config ====================
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml (推荐)
  mapper-locations: classpath:mybatis/mapper/*.xml
  #  # 实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.jundemon.service.quartz.model
  configuration:
    #    # 配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
  global-config:
    # 刷新mapper 调试神器
    refresh: true
    db-config:
      # 主键类型  auto:"数据库ID自增", input:"用户输入ID",id_worker:"全局唯一ID (数字类型唯一ID)"
      # id_worker_str:"全局唯一ID (字符串类型唯一ID)" uuid:"全局唯一ID UUID";
      id-type: auto
      # 数据库大写下划线转换
      column-underline: true
      # 字段策略 ignored:"忽略判断", not_null:"非 NULL 判断"), not_empty:"非空判断"
      field-strategy: not_null
      # 逻辑删除的字段需要注解  @TableLogic
      # 逻辑删除全局值
      logicDeleteValue: 1
      # 逻辑未删除全局值
      logicNotDeleteValue: 0
      # 全局表前缀
#      table-prefix: